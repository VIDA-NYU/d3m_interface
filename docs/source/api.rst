API
=========

.. function:: Automl(output_path, ta2_name)

   Create/instantiate an Automl object

   :param output_path: path to the output directory
   :param ta2_name: Ta2 system name. It makes reference to the ta2 docker image. The provided ta2 systems are the following: ``NYU, CMU, SRI, TAMU``

.. function:: search_pipelines(dataset, time_bound, target=None, metric=None, task_keywords=None)

   Perform the search of pipelines

   :param dataset: path to dataset. It supports D3M dataset, and CSV file 
   :param time_bound: limit time in minutes to perform the search
   :param time_bound_run: Optional. limit time in minutes to score a pipeline
   :param target: Optional. column name of the potential target variable for a problem.
   :param metric: Optional. the provided metrics are the following: ``hammingLoss, accuracy, objectDetectionAP, rocAucMicro, f1Macro, meanSquaredError, f1, jaccardSimilarityScore, normalizedMutualInformation, rocAuc, f1Micro, hitsAtK, meanAbsoluteError, rocAucMacro, rSquared, recall, meanReciprocalRank, precision, precisionAtTopK, rootMeanSquaredError``
   :param task_keywords: Optional. a list of keywords that capture the nature of the machine learning task. The keywords that can be combined to describe the task are the following: ``tabular, nested, multiLabel, video, linkPrediction, multivariate, graphMatching, forecasting, classification, graph, semiSupervised, text, timeSeries, clustering, collaborativeFiltering, univariate, missingMetadata, remoteSensing, multiClass, regression, multiGraph, lupi, relational, audio, grouped, objectDetection, vertexNomination, communityDetection, geospatial, image, overlapping, nonOverlapping, speech, vertexClassification, binary``
   :returns: JSON structure (dict)

.. function:: train(solution_id)

   Train a model using an specific ML pipeline

   :param solution_id: pipeline id
   :returns: return model id

.. function:: test(model, test_dataset)

   Test a model

   :param model: model id
   :param test_dataset: path to dataset. It supports D3M dataset, and CSV file
   :returns: Dataframe that contains the predictions

.. function:: score(solution_id, test_dataset)

   Compute a proper score of the model 

   :param solution_id: pipeline id
   :param test_dataset: path to dataset. It supports D3M dataset, and CSV file
   :returns: tuple holding metric name and score value
   
.. function:: create_profiler_inputs(test_dataset)

   Create an proper input supported by PipelineProfiler based on the pipelines generated by a TA2 system

   :param test_dataset: Optional. path to dataset. It supports D3M dataset, and CSV file
   :returns: List of pipelines in the PipelineProfiler input format

.. function:: end_session()

   This safely ends session in D3M interface

.. function:: add_new_ta2(name, docker_image)

   Add a new TA2 system that is not already defined in the D3M Interface. It can also be a different version of a pre-existing TA2 (however it must be added with a different name)

   :param name: a name to identify the new TA2
   :param docker_image: the docker image url of the new TA2
